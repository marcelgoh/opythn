(* OPythn main front-end *)

open Printf
open Ast

(* print tokens generated by lexer *)
let lex buffer =
  let tok = ref (Lexer.read buffer) in
  while !tok <> EOF do
    printf "%s" (Token.show !tok);
    tok := (Lexer.read buffer)
  done;
  printf "%s" (Token.show !tok)

(* return printable AST generated by parser *)
let parse buffer = try Parser.file_input Lexer.read buffer with
                     Parser.Error ->
                       printf "%s: Syntax error.\n" (Lexer.print_position buffer);
                       []

(* run tests *)
let run_tests opy_code =
  let buffer = ref (Lexing.from_string opy_code) in
  printf "************ LEXER OUTPUT ************\n";
  lex !buffer;
  printf "************ PARSER OUTPUT ************\n";
  buffer := Lexing.from_string opy_code; (* reset buffer *)
  let tree = parse !buffer in
  printf "%s\n" (Ast.show tree)

(* quit repl *)
let quit _ =
  printf "\nIch sterbe.\n";
  exit 0

(* read-eval-print loop *)
let rec repl () =
  printf "]=> ";
  flush stdout;
  let buffer = Lexing.from_channel stdin in
  let tree = parse buffer in
  printf "%s\n" (Ast.show tree);
  repl ()

(* select mode based on program arguments *)
let main () =
  if Array.length Sys.argv < 2 then (
    (* start interactive mode *)
    printf "+----------------------------------------------+\n";
    printf "|             OPYTHN INTERACTIVE MODE          |\n";
    printf "|   Author: Marcel Goh (Release: 11.04.2019)   |\n";
    printf "|            Type \"Ctrl-C\" to quit.            |\n";
    printf "+----------------------------------------------+\n";
    flush stdout;
    Sys.set_signal Sys.sigint (Sys.Signal_handle quit);
    repl ()
  )
  else
    (* interpret from file *)
    match Fileio.str_of_prog_args () with
      Some s -> run_tests s
    | None   -> printf "Failed to read from file.\n"

let _ = main ()
