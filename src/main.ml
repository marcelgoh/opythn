(* OPythn main front-end *)

open Printf
open Ast

(* print tokens generated by lexer *)
let test_lexer () =
  let opy_code = Fileio.str_of_prog_args () in
  match opy_code with
    Some s -> let buffer = Lexing.from_string s in
              let tok = ref (Lexer.read buffer) in
              while !tok <> EOF do
                printf "%s" (Token.show !tok);
                tok := (Lexer.read buffer)
              done;
              printf "%s" (Token.show !tok);
    | None -> printf "A file must be provided as input.\n"

(* print AST generated by parser *)
let test_parser () =
  let parse_exn buffer = try Parser.file_input Lexer.read buffer with
                    Parser.Error ->
                      printf "%s: syntax error.\n" (Lexer.print_position buffer);
                      [] in
  let opy_code = Fileio.str_of_prog_args () in
    match opy_code with
      Some s -> let buffer = Lexing.from_string s in
                let tree = parse_exn buffer in
                printf "%s\n" (Ast.show tree)
    | None   -> printf "A file must be provided as input.\n"

(* quit repl *)
let quit() =
  printf "Ich sterbe.\n";
  exit 0

(* read-eval-print loop *)
let rec repl () =
  printf "]=> ";
  let input = read_line () in
  match input with
    ":q"    -> quit ()
  | _       -> printf "Soon this will be a fun interactive mode, but not yet :(\n";
               repl ()

let _ = if Array.length Sys.argv < 2 then (
          (* start interactive mode *)
          printf "+----------------------------------------------+\n";
          printf "|             OPYTHN INTERACTIVE MODE          |\n";
          printf "|   Author: Marcel Goh (Release: 10.04.2019)   |\n";
          printf "|              Type \":q\" to quit.              |\n";
          printf "+----------------------------------------------+\n";
          repl ()
        )
        else
          (* interpret from file *)
          printf "************ LEXER OUTPUT ************\n";
          test_lexer ();
          printf "************ PARSER OUTPUT ************\n";
          test_parser ()
